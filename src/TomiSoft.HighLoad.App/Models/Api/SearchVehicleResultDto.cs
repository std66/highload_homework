/*
 * Vehicle registration API
 *
 * A service to manage vehicle registrations.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Runtime.Serialization;
using System.Text;

namespace TomiSoft.HighLoad.App.Models.Api {
    /// <summary>
    /// An array of matching vehicles found during the search operation. May be empty if no matches were found.
    /// </summary>
    [DataContract]
    public partial class SearchVehicleResultDto : List<RegisteredVehicleDto>, IEquatable<SearchVehicleResultDto> {
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString() {
            var sb = new StringBuilder();
            sb.Append("class SearchVehicleResultDto {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj) {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((SearchVehicleResultDto)obj);
        }

        /// <summary>
        /// Returns true if SearchVehicleResultDto instances are equal
        /// </summary>
        /// <param name="other">Instance of SearchVehicleResultDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchVehicleResultDto? other) {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return false && base.Equals(other);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode() {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(SearchVehicleResultDto left, SearchVehicleResultDto right) {
            return Equals(left, right);
        }

        public static bool operator !=(SearchVehicleResultDto left, SearchVehicleResultDto right) {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
